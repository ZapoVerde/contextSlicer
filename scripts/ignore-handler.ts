/**
 * @file packages/context-slicer-app/scripts/ignore-handler.ts
 * @stamp {"ts":"2025-10-13T10:04:18.919Z"}
 * @architectural-role Business Logic
 * @description
 * This module creates the authoritative file filtering engine. It is being updated
 * to be "self-aware" by programmatically generating a high-priority ignore
 * rule for its own output directory. This ensures the tool never analyzes its
 * own generated artifacts, regardless of where the target project is located.
 * @api-declaration
 *   // (Auto-generated by audit script)
 * @contract
 *   assertions:
 *     purity: mutates # This script reads .gitignore files from the filesystem.
 *     external_io: none # It only interacts with the local filesystem.
 */

import path from 'path';
// This is a documented exception following the project's established pattern
// for handling CJS/ESM interop issues under the 'NodeNext' module resolution
// strategy (see AdmZip usage in `file-utils.ts`). The 'ignore' package's
// type definitions cause a false positive error, so we cast to 'any' as a
// pragmatic escape hatch.
import ignore from 'ignore';
import { slicerConfig, REPO_ROOT, DUMP_ROOT } from './config.js';

const ig = (ignore as any)();

// 1. Add the base deny patterns from the loaded configuration file.
ig.add(slicerConfig.sanitation.denyPatterns);


// 2. Add the dynamic "self-aware" exclusion rule.
// This calculates the path from the target project's root to the tool's own output directory.
const selfIgnorePath = path.relative(REPO_ROOT, DUMP_ROOT).replace(/\\/g, '/');
ig.add(selfIgnorePath);


// 2. Finally, add the mandatory inclusion rules from the config.
// These are added last to ensure they have the highest precedence.
ig.add(slicerConfig.sanitationOverrides.mandatoryInclusions);


export default ig;